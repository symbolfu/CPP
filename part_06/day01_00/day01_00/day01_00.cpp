
/*
	===========================================================
	函数探幽：重点章节
		内联函数
		引用变量
		引用传递函数参数
		默认参数
		函数重载
		函数模板
		函数模板具体化

		1、内联函数
			技术：空间换时间
			背景：
				内联函数时c++为了提高程序运行速度的一项改进；
			改进原理：
				这里需要提到一组概念：常规函数和内联函数；
				常规函数在程序机器码中只保存了一份；
				当调用函数时，会开启一个子程序，将原函数cpu状态压栈，然后跳转到被调用函数地址入口；
				执行被调用函数code；返回函数值，释放栈空间；
				将原函数cpu状态出栈；
				这里的压栈和出栈需要消耗cpu的执行时间，但是节省了程序内存空间；
				
				随着技术发展，内存空间比较大了，同时当函数code逻辑较简单，可以将函数code copy一份到调用处，减少压栈和出栈的时间；
				从而提高程序执行速度，即以空间换时间的方法；
			
			应用场景：
				1、被调用函数较简单；否则速度不会有较大改善并且会造成内存空间巨大；
				2、只调用一次的函数；

			code实现：
				与常规函数相比，在函数定义和声明前加上关键字：inline;

			这种改进方法需要编译器极支持，有时候即使不使用inline关键字，编译器内部也会自动优化；
			类似于c语言的宏定义，但是又区别于宏定义，因为支持值传递；

*/

#include<iostream>
using namespace std;

inline double square(double x) { return x * x; }

void test01()
{
	//内联函数
	double a, b;
	double c = 12.0;

	a = square(5.0);
	b = square(10.0 + 2.0); //***********************
	cout << "a = " << a << endl;
	cout << "b = " << b << endl;
	cout << "c = " << c << endl;
}

int main()
{

	test01();

	return 0;
}