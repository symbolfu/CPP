
/*
	c++中的代码重用：
		主要内容：
			has-a关系
			包含对象成员的类；
			模板类valarray
			
			私有和保护继承
			多重继承
			虚基类

			创建类模板
			使用类模板
			模板的具体化
	
		c++的一个主要目的是促进代码重用；
			公有继承是实现该目的的方式之一；
			使用对象成员也是方式之一；
			使用私有或保护继承也是方式之一；
			模板技术也是方式之一；

		has-a关系：
			一个类包含另一个类的对象；



		私有继承：默认
			基类的公有成员和保护成员都将成为派生类的私有成员；
			从用户使用角度来说，不是is-a关系，而是has-a关系，即包含关系；

		is-a关系：
			继承接口，还可能有实现（纯虚函数）

		has-a关系：
			获取实现，但不能获取接口；

		保护继承：
			基类的公有成员和保护成员都将成为派生类的保护成员；
			保护继承相当于私有继承的变种；

		using可以重新定义访问权限；
			using yyy::xxx
			即将基类成员“导入到”派生类的某个访问空间中；




*/

#include<iostream>
using namespace std;


class A
{
private:
	int a = 1;
	void show_p1() { cout << "a1 = " << a << endl; }

public:
	void show_p2() { cout << "a2 = " << a << endl; }
	
};

class B : private A
{
	
};