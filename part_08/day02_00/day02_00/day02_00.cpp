

/*
	类和对象：
		OOP特性：
			抽象
			封装和数据隐藏
			多态
			继承
			代码的可重用性


		编程思考方式：
			过程编程：
				首先，考虑要遵循什么样的步骤；然后考虑如何表示这些数据；

			OOP编程：从用户的角度去思考对象：用户需要什么数据，用户与数据交互所需要的操作
				首先，考虑数据：如何表示数据，如何使用数据；

		类规范：一般由两部分构成
			1、类声明：
				以数据成员的方式描述数据部分，以成员函数（或称为方法）的方式描述公共接口；
			2、类方法定义：
				描述如何实现类成员函数

		控制访问：
			private：默认类型
			public




*/
#include<iostream>
#include"class_demo.h"
using namespace std;


int main()
{


	return 0;
}